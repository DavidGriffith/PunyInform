!% -~S
!% $OMIT_UNUSED_ROUTINES=1

! Library_of_horror.inf - a sample game which uses PunyInform

! Uncomment to add optional features to PunyLib
!Constant DEBUG;
!Constant CUSTOM_ABBREVIATIONS;
!Constant OPTIONAL_FULL_DIRECTIONS;
!Constant OPTIONAL_ALLOW_WRITTEN_NUMBERS;
!Constant OPTIONAL_EXTENDED_VERBSET;
!Constant OPTIONAL_GUESS_MISSING_NOUN;
Constant OPTIONAL_FULL_SCORE;
Constant OPTIONAL_MANUAL_SCOPE;
Constant RUNTIME_ERRORS = 2; ! 0 = Minimal error checking, 1 = Numeric error codes, 2: Error messages

Constant Story      "The Library Of Horror";
Constant Headline   "^A PunyInform demo game^";

Constant MAX_SCORE = 100;
Constant TASKS_PROVIDED;
Constant NUMBER_TASKS = 5;
Array task_scores -> 10 20 20 50 20;
Constant TASK_TALK_MANAGER = 0;
Constant TASK_GIVE_BOOK = 1;
Constant TASK_BLOCK_ROBOT = 2;
Constant TASK_BURN_BOOK = 3;
Constant TASK_LEAVE = 4;

Include "globals.h";

[ PrintRank;
	print ", earning you the rank of ";
	if (score >= 100) "Hero.";
	if (score >= 70) "Brave.";
	if (score >= 50) "Trustworthy.";
	if (score >= 30) "Promising.";
	if (score >= 10) "Well-meaning.";
	"Novice.";
];
[ PrintTaskName task_number;
	switch (task_number) {
		TASK_TALK_MANAGER: 	"talking to the manager";
		TASK_GIVE_BOOK: 	"giving the manager the book";
		TASK_BLOCK_ROBOT: 	"obstructing the robot";
		TASK_BURN_BOOK: 	"burning the evil book";
		TASK_LEAVE: 		"leaving the library";
	}
];


[ DeathMessage;
	switch(deadflag) {
		3: print "You have summoned demons set to destroy the world";
		4: print "You have been incinerated";
	}
];

! Setup flags

Constant FLAG_COUNT = 4;
Constant F_TALKED_TO_MANAGER = 0;
Constant F_FRANK_BLOCKED_BY_BOX = 1;
Constant F_BOOK_DELIVERED = 2;
Constant F_STARTED_FIRE = 3;
Include "ext_flags.h";

! Setup cheap scenery
[SceneryReply;
	default:
		"Better just leave it alone and get on with the task at hand.";
];
Include "ext_cheap_scenery.h";

! Setup quote box
Constant QUOTE_V3_SCREEN_WIDTH 40;
Include "ext_quote_box.h";

Include "puny.h";

!===================== Classes, verbs etc for game

! -- testing scope grammar token
! See: https://www.inform-fiction.org/manual/html/s32.html 

! Burn is available in the extended verb set, but we'll define it here instead of adding the weight of all those new verbs.
! Also, we want it to work a little differently from the way it works in the library - the player shouldn't have to
! carry the candles to burn the book.

[ BurnSub;
	"That seems dangerous and pointless.";
];

Verb 'burn' 'light'
	* noun						-> Burn
	* noun 'with' noun			-> Burn;

[ CoverSub;
	"That seems pointless.";
];


Extend only 'cover' first
	* noun 'with'/'using' held	-> Cover;

Verb 'blindfold' = 'cover';

Extend 'put' first
	* held 'on' creature		-> Cover reverse
	* held 'over' noun 			-> Cover reverse;

[ TalkToSub;
	print_ret (The) noun, " doesn't seem interested.";
];

Verb 'talk' 'report'
	* 'to' creature -> TalkTo;

[ QueryTopic;
  switch (scope_stage) {
      1: rfalse;
      2: ScopeWithin(WhatIsTopics); rtrue;
      3: "You haven't the faintest.";
  }
];

[ QuerySub; noun.description();];

Verb 'what' * 'is'/'was' scope=QueryTopic -> Query;

Class MultiTopic
	with
		number 0,
		parse_name [ _w1 _w2 _i _sw1 _sw2 _len;
			_w1 = NextWordStopped();
			_w2 = NextWordStopped();
			_i = 0;
			_len = self.#topics / 2;
#IfTrue RUNTIME_ERRORS > RTE_MINIMUM;
#IfTrue RUNTIME_ERRORS == RTE_VERBOSE;
			if(_len % 3 > 0)
				"ERROR: multi_topic topics property of ", (the) self," has incorrect # of values!^";
#IfNot;
			if(_len % 3 > 0)
				"ERROR: multi_topic #1!^";
#EndIf;
			while(_i < _len) {
				_sw1 = self.&topics-->(_i+2);
#IfTrue RUNTIME_ERRORS == RTE_VERBOSE;
				if(~~(_sw1 ofclass String or Routine))
					"ERROR: Element ", _i+2, " in multi_topic topics property of ", (the) self," is not a string or routine!^",
						"Element: ", (name) _sw1, "^";
#IfNot;
				if(~~(_sw1 ofclass String or Routine))
					"ERROR: multi_topic #2!^";
#EndIf;

				_i = _i + 3;
			}
			_i = 0;
#endif;
			while(_i < _len) {
				_sw1 = self.&topics-->_i;
				_sw2 = self.&topics-->(_i+1);
				if(_w1 == _sw1 && _w2 == _sw2) {
					self.number = _i;
					return 2;
				}
				if(_w1 == _sw1 or _sw2) {
					self.number = _i;
					return 1;
				}
				_i = _i + 3;
			}
			! It would make sense to return 0 here, but property
			! routines return 0 by default anyway.
		],
		description [ _k;
			_k = self.&topics-->(self.number + 2);
			if(_k ofclass Routine) {
				_k();
				rtrue;
			}
			print_ret (string) _k;
		];

Object WhatIsTopics "WhatIsTopics";

MultiTopic -> MultiQuestion_1 "MultiQuestion_1"
	with
		topics
			1 'library' "A library is venue where books are kept and people can borrow said books."
			1 'grue' "A grue is a sinister creature lurking in the dark. If anyone has actually seen a grue,
				they have not lived long enough to tell the tale."
			1 'manager' "Library managers oversee the daily activities and functions of a library.";  

Array quote_1 --> 5 35
"When I die, I want to go peacefully"
"in my sleep like my grandfather."
"Not screaming in terror, like the" 
"passengers in his car."
"               -- Jack Handey";

Object GloomyStreet "Gloomy Street"
	with
		description "The houses in this area seem hastily abandoned as if a mysterious tragedy had sown panic among its former inhabitants. All you see are shattered windows and ripped doors.
            In front of you, to the south, is the strangely well preserved and beautiful library building where you have to work.",
		cheap_scenery
            'windows' 'doors' "Remains of a distant and mysterious tragedy!"
            'houses' 'street' "Creepy and abandoned."
			1 'library' "It's a beautiful building. Looks like 19th century Art Nouveau architecture to you.",
		s_to Library,
        cant_go "Your work is to the south, though you are tempted to go home and forget all about it.",
		after [;
			Go:
				if(FlagIsSet(F_STARTED_FIRE))
					StopDaemon(EvilBook);
				if(FlagIsSet(F_BOOK_DELIVERED) || FlagIsSet(F_STARTED_FIRE)) {
					Achieved(TASK_LEAVE);
					<Look>;
					deadflag = 2;
					if(FlagIsSet(F_BOOK_DELIVERED))
						"^You leave the library with mixed feelings. On the one hand, you're glad to be done with your modest task and to get out of this gloomy neighbourhood.
                        On the other hand, there's something about that store that makes your hair stand on end.
                        ^Oh well. Maybe it's better to forget about it and enjoy a quiet afternoon in your flat.";
					else
						"^You managed to escape the burning building just in time! As you catch your breath on the street slabs, you watch the walls blackened by the flames,
                        the door falling to pieces on the floor and the windows bursting in the heat.
                        ^A sound reaches you, distant but discernible, beyond the crackling of the flames. It is a sinister laugh, echoing through the lonely streets â€”the
                        laughter of the library manager.
                        ^Terrified, you walk away from that place, never to return. In the future, you'll be more careful about the jobs you choose.";
				}
		],
	has light;
	
Object Library "The Library"
	with
		description "The library seems surprisingly large inside. Tens of thousands of valuable antique volumes lie on the high shelves.
            The air feels charged with dust and the smell of antiquity.
            ^To the east, it is possible to go deeper into the building. To the north is the exit to the outside.",
		cheap_scenery
            'volumes' 'books' "One could spend a lifetime reading only a fraction of the books in this room."
            'shelf' 'shelves' "Full of every conceivable book in this world."
			1 'library' "It's a beautiful old library.",
		n_to GloomyStreet,
		e_to TopOfStairs,
	has light;

Object -> Manager "library manager"
	with
		article "the",
        description "Although at first glance he looks like a normal middle-aged man, something is unsettling about this person.
            Perhaps it is the fact that he wears black or the constant movement of his eyes and his whispers to himself. Or maybe it is
            the mysterious and arcane looking symbols hanging over his whole body.",
        describe [;
            print "The manager of the library is here, deeply concentrated on the arrangement of one of the shelves";
            if(FlagIsClear(F_TALKED_TO_MANAGER)) ". Perhaps you should talk to him and ask him about the job.";
            ".";
        ],
		parse_name [ _w1;
			_w1 = NextWordStopped();
			if(_w1 == 'manager') return 1;
			if(_w1 == 'library' && NextWordStopped() == 'manager') return 2;
		],
		before [;
			TalkTo:
				if(FlagIsClear(F_TALKED_TO_MANAGER)) {
					SetFlag(F_TALKED_TO_MANAGER);
					Achieved(TASK_TALK_MANAGER);
					"He looks up from the shelf in surprise. When he sees you, he smiles (something is unsettling in his smile) and says:
                    ~Wow! I didn't remember you were coming today. You're the new assistant, right? I imagined you taller. Never mind! I
                    won't be able to spend much time with you today. You'd better come tomorrow.~
                    ^When you're about to leave the bookstore upset, you hear his voice again. ~Wait! Maybe I do need you. There's a book
                    I need, Where the Wild Things Are by Maurice Sendak. I must have left it in the repair shop in the basement. Frank the
                    Robot is down there. He'll help you find it.~
                    ^After saying this, he turns his back on you and continues to arrange the shelf.
                    ^(Did he mention... a robot?)";
				} else
					"~Can't you see I'm busy? I can't waste my time with nonsense! Ask Frank for help!~
                    ^Once again, he directs his attention to the fascinating shelf.";
		],
		life [;
			Ask, Tell, Show:
				if(noun==WildThingsBook)
					<<Give noun self>>;
				<<TalkTo self>>;
			Give:
				if(noun==WildThingsBook) {
					remove noun;
					scope_modified = true;
					SetFlag(F_BOOK_DELIVERED);
					Achieved(TASK_GIVE_BOOK);
					"When you approach the manager, for a moment, he seems ready to get angry about the interruption, but his face lights
                    up when he sees the book in your hand.
                    ^~Great! You've done exactly what I asked!~
                    ^In confidence, he adds: ~I'm glad you didn't waste your time with things that are none of your business. It makes me
                    trust you more.~
                    ^He pats you on the back twice and says: ~Come first thing tomorrow. We'll start working for real.~ And again he turns
                    towards the shelf.";
				}
		],
	has animate;

Object TopOfStairs "Staircase Leading Down"
	with
		description "The stairs descend into a foreboding darkness. The main hall of the library is off to the west.",
		before [;
			Go:
			if(selected_direction==d_to) {
				if(FlagIsClear(F_TALKED_TO_MANAGER))
					"You have no business running around in the basement. Better go talk to the library manager instead,
						to find out where you're needed.";
				if(self hasnt general) {
					give self general;
					QuoteBox(quote_1);
				}
			}
		],
		after [;
			Go:
				StopDaemon(Frank);
		],
		w_to Library,
		d_to BottomOfStairs,
	has light;
		
Object BottomOfStairs "Basement, Near Staircase"
	with
		description "It's nearly dark here, since the lamp in the ceiling is missing its light bulb.
			However, there's enough light coming in from the stairs and nearby rooms to make
			out your surroundings. There is more light to the east.",
		u_to TopOfStairs,
		e_to Hallway,
	has light;

! Data that Frank needs to print where he came from.	
#IfDef OPTION_FULL_DIRECTIONS;
Array opposite_directions table "south" "north" "west" "east" "southwest" "southeast" "northwest" "northeast" 
	"down" "up" "out" "in";
#IfNot;
Array opposite_directions table "south" "north" "west" "east" "down" "up" "out" "in";
#EndIf;

Object -> Frank "Frank the Robot"
	with
		number 0,
		name 'frank' 'the' 'robot',
		when_off [; ! The first time the player spots Frank, he turns on automatically and his daemon is started.
			give self on;
			give self moved;
			StartDaemon(self);
			"Frank the Robot is standing here, all dark and quiet. As you enter the room, some LEDs light up and Frank's eyes start to glow with a feeble yellow light.";
		],
		before [;
			SwitchOff:
				"A bright light arc juts out from near the button and the electric shock makes you jump back.";
			Cover:
				if(second==Box) {
					if(child(Box))
						"But the box isn't empty!";
					SetFlag(F_FRANK_BLOCKED_BY_BOX);
					move Box to self;
					scope_modified = true;
					Achieved(TASK_BLOCK_ROBOT);
					self.number = 3; ! Make the box stay in place this many moves minus one.
					"Frank's head, where most of his sensors are located, is now covered by the box.";
				}
				"It doesn't look like it would fit.";
		],
		react_before [;
			Go:
				if(location == StorageRoom && selected_direction == e_to && FlagIsClear(F_FRANK_BLOCKED_BY_BOX))
					"Frank rolls up in front of you, blocking your path. ~That part of the basement is not safe. There is nothing of interest there anyway.~";
		],
		daemon [ _my_loc _i _dir_prop _dir_count;
			! Frank wants to follow the player around, but can't go up/down/in/out
			if(FlagIsSet(F_FRANK_BLOCKED_BY_BOX)) {
				if(--self.number == 0) {
					ClearFlag(F_FRANK_BLOCKED_BY_BOX);
					remove Box;
					scope_modified = true;
					if(Frank in location)
						"^Frank manages to break out of the cardboard box. He goes on to incinerate the box.";
					else
						"^From some other room, you hear the sound of the cardboard box falling to the floor and then
							what sounds like a quick burst of fire.";
				}
			}
			if(FlagIsClear(F_FRANK_BLOCKED_BY_BOX)) {
				_my_loc = parent(self);
				if(location ~= _my_loc){
					_dir_count = direction_properties_array-->0 - 4; ! Skip the last 4 directions (u_to, d_to, in_to, out_to)
					for(_i=1 : _i <= _dir_count : _i++) {
						_dir_prop = direction_properties_array-->_i;
						if(_my_loc provides _dir_prop && _my_loc._dir_prop == location) {
							move self to location;
							scope_modified = true;
							print "^Frank enters from the ", (string) opposite_directions-->_i, ".^";
							if(location == DarkChamber) {
								print "^Frank gently pushes you out of the room. ~Nothing to see here, now is there?~^";
								move self to StorageRoom;
								PlayerTo(StorageRoom);
							}
							rtrue;
						}
					}
				}
			}
		],
		description "Frank has a rather dreary look.",
	has animate proper switchable transparent;

Object Hallway "Hallway"
	with
		description "A wide hallway leads from the stairs to the west to another room to the south. There are some
			dusty doors along the walls, but they have all been nailed shut a long time ago.",
		cheap_scenery 'door' 'doors' "Regular doors, but old and worn, with some cobweb on them.",
		w_to BottomOfStairs,
		s_to StorageRoom,
	has light;
	
Object StorageRoom "Storage Room"
	with 
		description "A large storage room, which is now empty except for cobweb and dust. 
			Some light is coming from the north and west. A smaller, dark passage leads east. There's a
			yellow sign above the dark passage.",
		cheap_scenery 
			'dust' 'cobweb' "Doesn't look like this part of the basement is ever cleaned."
			'yellow' 'sign' "~Dangerous area! Keep out!~",		
		n_to Hallway,
		w_to RepairShop,
		e_to DarkChamber,
	has light;

Object RepairShop "Repair Shop"
	with
		description "This is a smaller room, with a workbench and various specialized tools. The whole room 
			is quite clean.",
		cheap_scenery 
			'bench' 'workbench' "It's an old and worn workbench."
			'specialized' 'tools' "The tools are for repairing books, you can tell that much.",
		e_to StorageRoom,
	has light;

Object -> Box "cardboard box"
	with
		name 'cardboard' 'box',
		description "It's an old and worn box, albeit in reasonably good shape.",
	has container open;

Object -> -> WildThingsBook "small book"
	with
		name 'small' 'book' 'books//p',
		description "Where the Wild Things Are, by Maurice Sendak.",
		before [;
			Open, Close:
				"The manager just asked you to get the book, not read it.";
		];

Object DarkChamber "Dark chamber"
	with 
		initial "As you enter, two candles on a table suddenly light up. The large table stands 
			in the middle of the otherwise empty room.",
		description "A heavy-looking table with two candles on it stands in the middle of the room.",
		w_to StorageRoom,
	has light;

Object -> Table "table"
	with
		name 'large' 'table',
		description "It's a very sturds wooden table. Looks like oak to you.",
	has static scenery;
	
Object -> EvilBook "red book"
	with
		number 0,
		name 'red' 'leather' 'book' 'books//p',
		describe [;
			if(self has open)
				"^The large red book lies open on the table.";
			else 
				"^A large red book lies between the candles, closed.";
		],
		description [;
			print "The book is covered in red leather. ";
			if(self has open)
				"Some words are written across the page, in creepy letters.";
			else
				"Somehow, you get a feeling that the book is evil and dangerous.";
		],
		before [;
			Take:
				"The book is very heavy, and maybe it's been fixed to the table. In any case, you can't lift it.";
			Burn:
				if(second==Candles or 0) {
					if(FlagIsSet(F_STARTED_FIRE)) {
						"But it's already burning! You need to get out of the building immediately.";
					} else {
						SetFlag(F_STARTED_FIRE);
						Achieved(TASK_BURN_BOOK);
						StartDaemon(self);
						remove Manager;
						scope_modified = true;
						"You rip out a page, set fire to it and use it to set fire to the entire book.";
					}
				}
		],
		daemon [;
			switch(++self.number) {
				2:
					if(location==DarkChamber)
						"^As the flames rise higher, the wooden ceiling catches fire too.";
					else
						"^The sound of the fire in the dark chamber suddenly gets more intense.";
				6: 
					if(location==Library or TopOfStairs)
						"^Flames emerge from the floor in one corner and quickly start to spread along the walls.";
					else
						"It is now getting unbearably hot down here.";
				8: 
					if(location==Library or TopOfStairs)
						"^Flames are all around you now. You should still be able to reach the exit though.";
				11:
					deadflag=4;
					"The flames are now covering all exits. There is no hope for escape.";						
			}
			if(self.number > 7 && location ~= Library or TopOfStairs) {
				deadflag = 4;
				"The heat is too much for you, and you collapse on the floor.";
			}
		],
		add_to_scope [;
			if(self has open)
				PlaceInScope(Words);
		],
	has openable transparent;

Object -> Candles "candles"
	with
		describe [; rtrue; ],
		article "a pair of",
		name 'candle' 'candles',
		before [;
			Take:
				"The candles won't budge.";
			Burn:
				"The candles are already burning.";
		],
	has pluralname static;
	
Object Words "words"
	with
		name 'creepy' 'letters' 'word' 'words',
		before [;
			Examine:
				deadflag = 3;
				"After a few seconds of struggling with the ancient letters, you can make out the
					words and read them out loud: ~KLAATU BARADA NIKTO~^^
					Several holes open in the floor and fiery beings rise from them. The earth trembles and the walls and ceiling fall over you.";
		];
		
[Initialise;
	location = GloomyStreet;
	print "^^The search for a job can be arduous for a young person like you, with no experience or contacts and a newcomer to the city. That's why when you had that newspaper in your hands yesterday and read the ad (~young, inexperienced bookstore assistant needed~) you didn't hesitate for a second.
        ^However, now that you are walking down the gloomy streets of the neighbourhood where your future job resides, you wonder if you were not too quick to accept...^^";
];
