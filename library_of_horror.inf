!% -~S

! Library of Horror - a sample game which uses PunyInform

! Uncomment to add optional features to PunyLib
!Constant FULL_DIRECTIONS;
!Constant ALLOW_WRITTEN_NUMBERS;
Constant DEBUG_VERBS;

! compile as z8 to use Inform stdlib instead of puny (for debugging)
#Iftrue (#version_number == 8);
Constant USEINFORM;
#Endif;

Constant MAX_CARRIED 3;
Constant SACK_OBJECT infiniteBag;

! Setup flags
Constant FLAG_COUNT 8;
Constant F_SQUIRREL_ESCAPED 0;
Constant F_PARROT_FED 1;
Constant F_BOUGHT_TICKETS 2;

#Ifdef USEINFORM;
Include "Parser";
Include "VerbLib";
Include "./lib/ext_flags.h";

[OnOff obj; ! TODO: is there something like this in I6? change name if needed
    if(obj has on) print "on";
    else print "off";
    return;
];
#Endif;

#Ifndef USEINFORM;
Include "globals.h";

! Setup cheap scenery
[SceneryReply;
	Push:
		"Now how would you do that?";
	default:
		rfalse;
];

Include "ext_cheap_scenery.h";
Include "ext_flags.h";

! Setup custom library messages
Constant MSG_OPEN_YOU_CANT 1000;
Constant MSG_AREYOUSUREQUIT 1001;
[LibraryMessages p_msg;
	switch(p_msg) {
	MSG_OPEN_YOU_CANT:
		"How would you go about opening ", (a) noun, "?";
	MSG_AREYOUSUREQUIT:
		print "You ain't no quitter eh? ";
		rtrue;
	}
	rfalse;
];

Include "puny.h";
#Endif;

Constant SCN_WATER = "The water is so beautiful this time of year, all clear and glittering.";
[SCN_SUN; 
  deadflag = 1;
  "As you stare right into the sun, you feel a burning sensation in your eyes. 
    After a while, all goes black. With no eyesight, you have little hope of
    completing your investigations."; 
];

Class Book
	with
		name 'books//p',
		description [;
			print "Self is ", self, "^";
			if(self provides hello) {
				print (The) self, " has a Hello value of ", self.hello, ". ^";
			}
			rfalse;
		],
		hello 0,
		party [a;
			print "Self is ", self, "^";
			print "a is ", a, "^";
!			print "b is ", b, "^";
!			print "c is ", c, "^";
		];

Object CarPark "Car Park"
	with
		short_name [; print "In front of the library!"; rtrue; ],
		description "You are in a car park in front of the library. You can enter to the north. There is a river off to the east.",
		n_to Library,
		e_to RiverBank,
! 		exits [;
! 			N_TO: return Library;
! 		],
		cant_go "Without a car the only viable exit is to the north.",
	has light;

Object RiverBank "River Bank"
  with
    description "The river is quite wide here. The sun reflects in the blue water, the birds are 
      flying high up above.",
    cheap_scenery
      'blue' 'water' SCN_WATER
      'bird' 'birds' "They seem so careless."
      1 'sun' SCN_SUN,
   has light;

Object Toilet "The toilet"
	with
		short_name [; print "A toilet"; rtrue; ],
		description[;
			print "This toilet is in dire need of cleaning. ";
			if(Faucet has on) {
				"Water is streaming from the faucet into the sink. ";
			}
			rtrue;
		],
		w_to Library;

Object -> Goblin "Goblin"
	with 
		short_name "Goblin",
		description "He is a mean looking creature, not to be messed around with. ",
		name 'goblin' 'creature',
		before[;
			Attack: 
				print "But he has a grim looking scimitar, and you are defenceless. Are you sure that's a good idea? ";
				if(YesOrNo()) {
					deadflag = 2;
					"You'd never believe that so much blood was possible to be contained within this body. ";
				} else {
					"Wise call.";
				}

				rtrue;
		],
	has animate;	


Object -> Sink "Sink"
	with
		short_name "sink",
		name 'sink' 'water',
		description[;
			print "It's a regular white sink with a faucet for turning water on or off. ";
			if(Faucet has on) {
				"There's water running into the sink from the faucet. ";
			}
			rtrue;
		],
	has container static scenery; !TODO: scenery objects still shown in room description

Object -> Faucet "faucet"
	with
		short_name "faucet",
		name 'faucet',
		description[;
			print "It's a faucet, possible to switch on/off. ";
			"It's currently ", (OnOff) self, ".";
		],
	has switchable static scenery; !TODO: scenery objects still shown in room description

Object Library "The Library"
	with
		short_name [; print "Huge library"; rtrue; ],
		description "You are in an old and deserted library. There is an exit leading south and a toilet to the east.",
		s_to CarPark,
		e_to Toilet,
	has light;

Object -> LightSwitch "LightSwitch"
	with
		short_name "light switch",
		description "It's a switch located near the toilet. ",
		name 'light' 'switch',
		after[;
			SwitchOn:
				give toilet light;
				"You flip the light switch next to the toilet upwards ";
			SwitchOff:	
				give toilet ~light;
				"You flip the light switch next to the toilet downwards";
		],
	has switchable static;


Object -> LargeBox "The box" ! Set the object name to the name we want on the z3 status line when we're in the box. short_name will be used for all other cases.
	with
		short_name "box",
		name 'box',
		description [;
#Ifndef USEINFORM;
			if(_GetVisibilityCeiling(player) == self) {
				print "The box looked pretty big from the outside, but you feel really confined in here.";
				rtrue;
			} else {
				print "It's a large box. You could probably fit several people in there.";
				rtrue;
			}
#Endif;
		],
        time_out [;
            print "^The box goes BOOM.^";
        ],
		time_left 0,
	has container openable enterable static;

Book -> -> RedBook "red book"
	with
		name 'red' 'book',
		initial "On the bottom of the box, there is a red book.",
		description "The book is old and worn.",
		before [;
 			Take:
 				if(player in LargeBox) {
 					"It's too hard to pick it up while inside the box.";	
 				}
				if(BlueBook in player) {
					print "The blue book does not want to be near the red book and jumps out of your grasp and lands on the floor.^^";
					move BlueBook to location;
				}


		];

Object -> BlueBook "blue book" class Book
	with
		name 'book' 'blue',
		initial [;
			!print "Self is ", self, ". ";
			!if(BlueBook provides hello && BlueBook.hello > 10) {
			!	print "BlueBook.Hello is ", BlueBook.hello, ". ";
			!}
			print "A ";
			PrintShortName(self);
			" is standing on a shelf. Looking at ", (the) self, " makes you dizzy.";
		],
		before [;
			Turn:
				"You turn the book around and around. It is endlessly fun. ";
            Drop:
                if (self in player) {
                   StopDaemon(Self);
                }
		],
		after [;

			Take: 
				if(RedBook in player) {
					print "The red book does not want to be near the blue book and jumps out of your grasp and lands on the floor.^^";
					move RedBook to location;
                }
!                StartDaemon(LargeBox);
                StartDaemon(self);
                StartTimer(LargeBox, 3);
				print "The blue box starts ticking...^";
				rtrue; ! stop normal printouts
		],
!		description "The book looks new and shiny.",
        daemon [;
            print "^The blue book glows annoyingly.^";
        ],
		bobby 7,
		hello 13,
		pants (-1000) (-1001) (-1002) (-1003) (-1004) (-1005) (-1006) (-1007) (-1008) (-1009) (-1010) (-1011) (-1012) (-1013) (-1014) (-1015) (-1016) (-1017) (-1018) (-1019) (-1020) (-1021) (-1022) (-1023) (-1024) (-1025) (-1026) (-1027) (-1028) (-1029) (-1030) (-1031);

Object -> John "John"
	with
		name 'john',
		description "John is the meanest gangster around. Don't mess with him.",
		messed_with 0,
		react_before [;
			Take:
				if(noun == GreenBook && IndirectlyContains(parent(John), GreenBook) ) {
					print_ret (The) John, " says, ~Oh no! That's mine!~";
				}
		],
		before[; 
			Pull, Push: 
			switch(++self.messed_with) {
				1: "~I'm gonna make you regret that!~, John mutters. ";
				2: "~This is your final warning!~, John says. ";
				3: deadflag=2;
					"Oh dear, who would have guessed John was carrying a double barrelled gun with him to the library. ";
				
			}
			

		],
		orders [;
			Go: "~I must not leave this room.~";
			NotUnderstood: 
				!print special_number, " ", special_word, " ", 'pink', " ", consult_from;
				"~You speak in riddles.~";
		],
		life [c w1 w2;
		! Attack Kiss WakeOther ThrowAt Give Show Ask Tell Answer Order
		Order:
			if(action==##Take && noun==LargeBox) "~", (The) noun, " is too big.~";
			if(action==##Take) "~I don't need more possessions.~";
			"John ignores your comment.";
		Show, Give:
			! TODO <<>> doesn't work if(noun==PinkBook) <<Ask self PinkBook>>;
			if(noun==PinkBook) { <<Ask self PinkBook>>; rtrue; }
			"John doesn't appear to be interested.";
		Ask, Tell, Answer:
			w1=0;
			w2=0;
			wn=consult_from; c=consult_words; if(c>0) w1=NextWord();
			if(w1=='the') { c=c-1; if(c>0) w1=NextWord(); }
			if(c>1) w2=NextWord();
			if(c>2) "What you cannot say in few words, probably isn't worth saying.";

			if(w1=='help') "'I will help you, if you tell me how.'";
			if(second == PinkBook) "~That is a nice pink book.~";
			"John ignores your question.";
		],
	has proper animate;

Object -> infiniteBag "infinite bag"
	with
		short_name "hhhh",
		name 'infinite' 'bag',
		description "An infinitely deep bag.",
	has container open;

Book -> GreenBook "green book"
	with
		name 'book' 'green',
		description "The book is nice and tidy.",
		;

Book -> PinkBook "pink book"
	with
	    parse_name [ first_word;
!			print "Pink word 1: ", (address) NextWord(), "^";
!			print "Pink word 2: ", (address) NextWord(), "^";
			first_word = NextWord();
			if(first_word == 'pink') {
				if(NextWord() == 'book') return 2;
				return 1;
			} else if (first_word == 'book') {
				return 1;
			} else if (first_word == 'books') {
				return 1;
			}
			return 0;
!			if((parse_array+2+4*wn)-->0 == 'pink' &&
!			   (parse_array+2+4*(wn+1))-->0 == 'book') return 2;
!			if((parse_array+2+4*wn)-->0 == 'pink') return 1;
!			return 0;
	    ],
		description "The book is nice and tidy.",
		;

[TestSub;
	print_ret "Noun is ", noun;
];

Verb 'test'
	* special	-> Test;

[Initialise b i;
	location = Library;
!	PlayerTo(LargeBox);
	print "Parrot fed = ", FlagIsSet(F_PARROT_FED),"^";
	SetFlag(F_PARROT_FED);
	print "Have set. Parrot fed = ", FlagIsSet(F_PARROT_FED),"^";
	ClearFlag(F_PARROT_FED);
	print "Have cleared. Parrot fed = ", FlagIsSet(F_PARROT_FED),"^";
	print "Parrot fed != ", FlagIsClear(F_PARROT_FED),"^";

!	b = BlueBook.&pants;
!	for(i=0 : i<BlueBook.#pants / 2 : i++)
!		print "BlueBook pants(",i,") is ", b-->i, "^";
	BlueBook.description();
!	print "BlueBook.party is ", BlueBook.party, "^";
	BlueBook.party(5);
	print "^^And so the story begins...^^";
];
#Ifdef USEINFORM;
Include "Grammar";
#Endif;

