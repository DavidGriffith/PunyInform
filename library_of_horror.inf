!% -~S

! Library of Horror - a sample game which uses PunyInform

! Uncomment to add optional features to PunyLib
!Constant OPTIONAL_ALLOW_WRITTEN_NUMBERS;
Constant OPTIONAL_DEBUG_VERBS;
Constant OPTIONAL_EXTENDED_VERBSET;
Constant OPTIONAL_FULL_SCORE;
Constant OPTIONAL_GUESS_MISSING_NOUN;

!Constant DEBUG_TIMER; ! requires special Ozmoo
!Constant DEBUG_SCOPE;
!Constant DEBUG_PARSEPATTERN;
!Constant DEBUG_PARSETOKEN;
!Constant DEBUG_CHECKNOUN;
!Constant DEBUG_GETNEXTNOUN;
!Constant DEBUG_SCOPE;

!Constant TEST_BEFOREAFTER;

Constant Story      "The Library Of Horror";
Constant Headline   "^A sandbox for PunyInform development^";

#IfDef DEBUG_TIMER;
Serial "999999"; ! Serial "999999" enables timing in Ozmoo, meaning that the RTC (jiffies since start) can be read from $1c-->0 
#EndIf;

! compile as z8 to use Inform stdlib instead of puny (for debugging)
#Iftrue (#version_number == 8);
Constant USEINFORM;
#Endif;

Constant MAX_CARRIED 3;
Constant SACK_OBJECT infiniteBag;

Constant AMUSING_PROVIDED;

#IfDef OPTIONAL_FULL_SCORE;
Constant MAX_SCORE = 7;
Constant OBJECT_SCORE = 1;
Array task_scores -> 3 0; ! inform doens't like array of length 1
Constant TASKS_PROVIDED;
Constant NUMBER_TASKS = 1;
#IfNot;
Constant MAX_SCORE = 2;
#EndIf;

[ Amusing;
	"^Did you try?^^1. Pushing John many times.^2. Going outside and looking at the sun";
];

! Setup cheap scenery
[SceneryReply;
	Push:
		"Now how would you do that?";
	default:
		rfalse;
];


! Setup flags
Constant FLAG_COUNT 8;
Constant F_SQUIRREL_ESCAPED 0;
Constant F_PARROT_FED 1;
Constant F_BOUGHT_TICKETS 2;

#IfDef TEST_BEFOREAFTER;
[LookRoutine;
	"***** LookRoutine, yay!";
];	
#EndIf;


#Ifdef USEINFORM;
Include "Parser";
Include "VerbLib";
Include "ext_cheap_scenery.h";
Include "ext_flags.h";

[OnOff obj; ! TODO: is there something like this in I6? change name if needed
    if(obj has on) print "on";
    else print "off";
    return;
];
#IfNot;
Include "globals.h";
#EndIf;

[ DarkToDark;
	deadflag = 2;
	"You are eaten by a grue.";
];

[ PrintRank;
  print ", earning you the rank of ";
  if (score >= 3) "Treasure hunter.";
  if (score >= 2) "Explorer.";
  "Tourist.";
];
[ PrintTaskName task_number;
  switch (task_number) {
      0: "opening the box";
  }
];


#Ifndef USEINFORM;
Include "ext_cheap_scenery.h";
Include "ext_flags.h";

! Setup custom library messages
Constant MSG_OPEN_YOU_CANT 1000;
Constant MSG_AREYOUSUREQUIT 1001;
[LibraryMessages p_msg p_arg_1;
	switch(p_msg) {
	MSG_OPEN_YOU_CANT:
		"How would you go about opening ", (a) noun, "?";
	MSG_AREYOUSUREQUIT:
		print "You ain't no quitter eh? ";
		rtrue;
	}
	rfalse;
];

Include "puny.h";
#Endif;

Constant SCN_WATER = "The water is so beautiful this time of year, all clear and glittering.";
[SCN_SUN; 
  deadflag = 1;
  "As you stare right into the sun, you feel a burning sensation in your eyes. 
    After a while, all goes black. With no eyesight, you have little hope of
    completing your investigations."; 
];

Class Book
	with
		name 'books//p',
		description [;
			print "Self is ", self, "^";
			if(self provides hello) {
				print (The) self, " has a Hello value of ", self.hello, ". ^";
			}
			rfalse;
		],
		hello 0,
		party [a;
			print "Self is ", self, "^";
			print "a is ", a, "^";
!			print "b is ", b, "^";
!			print "c is ", c, "^";
		],
		before [;
			Open:
				"You've never been much of a reader.";
		],
	has openable;

Object CarPark "Car Park"
	with
		short_name [; print "In front of the library!"; rtrue; ],
		description "You are in a car park in front of the library. You can enter to the north. There is a river off to the east.",
		n_to Library,
		e_to RiverBank,
! 		exits [;
! 			N_TO: return Library;
! 		],
#IfDef TEST_BEFOREAFTER;
		after [; print "*** CarPark.after^"; ],
		before [; print "*** CarPark.before^"; ],
#EndIf;
		cant_go "Without a car the only viable exit is to the north.",
#IfDef OPTIONAL_FULL_SCORE;
	has scored light;
#IfNot;
	has light;
#EndIf;

Object -> Key "key"
	with
		name 'key',
#IfDef TEST_BEFOREAFTER;
		after [; print "*** Key.after^"; ],
		before [; print "*** Key.before^"; ],
#EndIf;
#IfDef OPTIONAL_FULL_SCORE;
	has scored
#EndIf;
	;

Object RiverBank "River Bank"
  with
		description "The river is quite wide here. The sun reflects in the blue water, the birds are 
      flying high up above.",
		w_to CarPark,
		cheap_scenery
			'blue' 'water' SCN_WATER
			'bird' 'birds' "They seem so careless."
			1 'sun' SCN_SUN,
	has light;

Object Toilet "The toilet"
	with
		short_name [; print "A toilet"; rtrue; ],
		description[;
			print "This toilet is in dire need of cleaning. The toilet door leads west back into the library. ";
			if(Faucet has on) {
				"Water is streaming from the faucet into the sink. ";
			}
			rtrue;
		],
		w_to ToiletDoor;

Object -> ToiletDoor "toilet door"
	with 
		name 'toilet' 'door',
!		parse_name [ _w; 
!			_w = NextWord();
!			if(_w == 'toilet') {
!				_w = NextWord();
!				if(_w == 'door')
!					return 2;
!				return 0;
!			}
!			if(_w == 'door')
!				return 1;
!		],
		description "Surprisingly clean.",
		door_to [; 
			if(location == Toilet) return Library;
			return Toilet;
		],
		door_dir [;
			if(location == Toilet) return w_to;
			return e_to;
		],
		when_open "The toilet door stands slightly ajar.",
		when_closed "The toilet door is closed.",
		found_in Toilet Library,
		with_key Key,
#IfDef TEST_BEFOREAFTER;
		after [; print "*** ToiletDoor.after^"; ],
		before [; print "*** ToiletDoor.before^"; ],
#EndIf;
	has door openable concealed static lockable;

Object -> Goblin "Goblin"
	with 
		short_name "Goblin",
		description "He is a mean looking creature, not to be messed around with. ",
		name 'goblin' 'creature',
		before[;
			Attack: 
				print "But he has a grim looking scimitar, and you are defenceless. Are you sure that's a good idea? ";
				if(YesOrNo()) {
					deadflag = 2;
					"You'd never believe that so much blood was possible to be contained within this body. ";
				} else {
					"Wise call.";
				}

				rtrue;
		],
	has animate;	


Object -> Sink "Sink"
	with
		short_name "sink",
		name 'sink' 'water',
		description[;
			print "It's a regular white sink with a faucet for turning water on or off. ";
			if(Faucet has on) {
				"There's water running into the sink from the faucet. ";
			}
			rtrue;
		],
	has container static scenery; !TODO: scenery objects still shown in room description

Object -> Faucet "faucet"
	with
		short_name "faucet",
		name 'faucet',
		description[;
			print "It's a faucet, possible to switch on/off. ";
			"It's currently ", (OnOff) self, ".";
		],
	has switchable static scenery; !TODO: scenery objects still shown in room description

Object Library "The Library"
	with
		name 'library', ! should create "you don't need to refer to ..."
		short_name [; print "Huge library"; rtrue; ],
		description "You are in an old and deserted library. There is an exit leading south and a toilet to the east.",
		s_to CarPark,
		e_to ToiletDoor,
		!e_to Toilet,
#IfDef TEST_BEFOREAFTER;
		after [; print "*** Library.after^"; ],
		before [; print "*** Library.before^"; ],
#IfNot;
		before [;
			Look:
				if(self hasnt general) {
					give self general;
					!QuoteBox(quote_1);
				}
		],
#EndIf;
	has light;

Object -> LightSwitch "LightSwitch"
	with
		short_name "light switch",
		description "It's a switch located near the toilet. ",
		name 'light' 'switch',
		before [;
			Push:
				if(self has on)
					<<SwitchOff self>>;
				else
					<<SwitchOn self>>;
		],
		after[;
			SwitchOn:
				give toilet light;
				"You flip the light switch next to the toilet upwards ";
			SwitchOff:	
				give toilet ~light;
				"You flip the light switch next to the toilet downwards";
		],
	has switchable static;


Object -> Aquarium "aquarium"
	with
		name 'aquarium',
		article "an",
		description "A big glass aquarium with a lid.",
	has container open openable transparent static;

Object -> LargeBox "The box" ! Set the object name to the name we want on the z3 status line when we're in the box. short_name will be used for all other cases.
	with
		short_name "box",
		name 'box',
		inside_description "The box looked pretty big from the outside, but you feel really confined in here.",
		description "It's a large box. You could probably fit several people in there.",
        time_out [;
            print "^The box goes BOOM.^";
        ],
        after [;
        Open:
#IfDef OPTIONAL_FULL_SCORE;
        	Achieved(0); ! opening the box is an achievement
#EndIf;
        Receive: 
        	++score;
        	! win if you put two things in the box
        	if(score >= MAX_SCORE) deadflag = 2;
       	],
		time_left 0,
	has container openable enterable static;

Object -> -> Gun "gun"
	with
		name 'gun',
		before [;
			Examine: rtrue;
			default: "It's very dangerous, better just leave it alone!";
		];

Object -> -> Ladder "ladder"
	with
		name 'ladder',
		inside_description "It's a really good ladder for standing on.",
	has supporter enterable;

Object -> -> -> Sticker "sticker"
	with
		name 'sticker';

Book -> -> RedBook "red book"
	with
		name 'red' 'book',
		initial "On the bottom of the box, there is a red book.",
		description "The book is old and worn.",
		before [;
 			Take:
 				if(player in LargeBox) {
 					"It's too hard to pick it up while inside the box.";	
 				}
				if(BlueBook in player) {
					print "The blue book does not want to be near the red book and jumps out of your grasp and lands on the floor.^^";
					move BlueBook to location;
				}


		];

Object -> BlueBook "blue book" class Book
	with
		name 'book' 'blue',
		initial [;
			!print "Self is ", self, ". ";
			!if(BlueBook provides hello && BlueBook.hello > 10) {
			!	print "BlueBook.Hello is ", BlueBook.hello, ". ";
			!}
			print "A ";
			PrintShortName(self);
			" is standing on a shelf. Looking at ", (the) self, " makes you dizzy.";
		],
		before [;
			Turn:
				"You turn the book around and around. It is endlessly fun. ";
            Drop:
                if (self in player) {
                   StopDaemon(Self);
                }
		],
		after [;

			Take: 
				if(RedBook in player) {
					print "The red book does not want to be near the blue book and jumps out of your grasp and lands on the floor.^^";
					move RedBook to location;
                }
!                StartDaemon(LargeBox);
                StartDaemon(self);
                StartTimer(LargeBox, 3);
				print "The blue box starts ticking...^";
				rtrue; ! stop normal printouts
		],
!		description "The book looks new and shiny.",
        daemon [;
            print "^The blue book glows annoyingly.^";
        ],
		bobby 7,
		hello 13,
		pants (-1000) (-1001) (-1002) (-1003) (-1004) (-1005) (-1006) (-1007) (-1008) (-1009) (-1010) (-1011) (-1012) (-1013) (-1014) (-1015) (-1016) (-1017) (-1018) (-1019) (-1020) (-1021) (-1022) (-1023) (-1024) (-1025) (-1026) (-1027) (-1028) (-1029) (-1030) (-1031),
	has light; ! well, it is glowing

Object -> John "John"
	with
		name 'john' 'johan',
		description "John is the meanest gangster around. Don't mess with him.",
		messed_with 0,
		add_to_scope Hair Beard,
		!add_to_scope [; PlaceInScope(Hair); ],
		react_before [;
			Take:
				if(noun == GreenBook && IndirectlyContains(parent(John), GreenBook) ) {
					print_ret (The) John, " says, ~Oh no! That's mine!~";
				}
		],
		before[; 
			Pull, Push: 
			switch(++self.messed_with) {
				1: "~I'm gonna make you regret that!~, John mutters. ";
				2: "~This is your final warning!~, John says. ";
				3: deadflag=2;
					"Oh dear, who would have guessed John was carrying a double barrelled gun with him to the library. ";
				
			}
			

		],
		orders [;
			Go: "~I must not leave this room.~";
			NotUnderstood: 
				!print special_number, " ", special_word, " ", 'pink', " ", consult_from;
				"~You speak in riddles.~";
		],
		life [c w1 w2;
		! Attack Kiss WakeOther ThrowAt Give Show Ask Tell Answer Order
		Order:
			if(action==##Take && noun==LargeBox) "~", (The) noun, " is too big.~";
			if(action==##Take) "~I don't need more possessions.~";
			"John ignores your comment.";
		Show, Give:
			! TODO <<>> doesn't work if(noun==PinkBook) <<Ask self PinkBook>>;
			if(noun==PinkBook) { <<Ask self PinkBook>>; rtrue; }
			"John doesn't appear to be interested.";
		Ask, Tell, Answer:
			w1=0;
			w2=0;
			wn=consult_from; c=consult_words; if(c>0) w1=NextWord();
			if(w1=='the') { c=c-1; if(c>0) w1=NextWord(); }
			if(c>1) w2=NextWord();
			if(c>2) "What you cannot say in few words, probably isn't worth saying.";

			if(w1=='help') "'I will help you, if you tell me how.'";
			if(second == PinkBook) "~That is a nice pink book.~";
			"John ignores your question.";
		],
	has proper animate;

Object -> infiniteBag "infinite bag"
	with
		name 'infinite' 'bag',
		article "an",
		description "An infinitely deep bag.",
	has container open;

Book -> GreenBook "green book"
	with
		name 'book' 'green',
		describe [; "^An old and torn green book is here."; ],
		description "The book is nice and tidy.",
		;


Book -> PinkBook "pink book"
	with
	    parse_name [ first_word;
!			print "Pink word 1: ", (address) NextWord(), "^";
!			print "Pink word 2: ", (address) NextWord(), "^";
			first_word = NextWord();
			if(first_word == 'pink') {
				if(NextWord() == 'book') return 2;
				return 1;
			} else if (first_word == 'book') {
				return 1;
			} else if (first_word == 'books') {
				return 1;
			}
			return 0;
!			if((parse_array+2+4*wn)-->0 == 'pink' &&
!			   (parse_array+2+4*(wn+1))-->0 == 'book') return 2;
!			if((parse_array+2+4*wn)-->0 == 'pink') return 1;
!			return 0;
	    ],
		description "The book is nice and tidy.";

[TestSub;
	print_ret "Noun is ", noun;
];

Verb 'test'
	* special	-> Test;

! -- testing scope grammar token
! See: https://www.inform-fiction.org/manual/html/s32.html 
[ QueryTopic;
  switch (scope_stage) {
      1: rfalse;
      2: ScopeWithin(questions); rtrue;
      3: "At the moment, even the simplest questions confuse you.";
  }
];

[ QuerySub; noun.description();];
Verb 'what' * 'is'/'was' scope=QueryTopic -> Query;

Object questions "questions";
Object -> "long count"
  with name 'long' 'count',
       description "The Long Count is the great Mayan cycle of
           time, which began in 3114 BC and will finish with
           the world's end in 2012 AD.";
Object -> "samarkand"
  with name 'samarkand',
       description "Samarkand is a city in south-eastern Uzbekistan.";

Object  Hair "John's hair"
  with  name 'hair' 'head',
        before [;
            Examine,Pull,Search:
                "John doesn't want to you to mess up his hair.";
            default: "Huh?";
        ],
  has   proper concealed;
Object  Beard "John's beard"
  with  name 'beard',
        before [;
            Examine,Pull,Search:
                "You wouldn't dare to touch his beard.";
            default: "Huh?";
        ],
  has   proper concealed;

Array dummy_buffer -> 5;

Array quote_1 --> 5 35
"When I die, I want to go peacefully"
"in my sleep like my grandfather."
"Not screaming in terror, like the" 
"passengers in his car."
"               -- Jack Handey";

Array quote_buffer -> 83;

[ QuoteBox p_quote_data _quote_lines _quote_width _screen_width _i _j _k _last_index;
	_quote_lines = p_quote_data --> 0;
	_quote_width = p_quote_data --> 1;
#IfV5;
	_screen_width = 0->$21;
#IfNot;
	_screen_width = 40;
#EndIf;
	_i = _quote_lines + 4;
	@split_window _i;
	@set_window 1;
!	@erase_window 1;
	@new_line;
	@new_line;
	_last_index = 2 + _quote_lines;
!	print "Screen width = ", _screen_width, ", quote width = ", _quote_width, "^";
	for(_i = 1 : _i <= _last_index : _i++) {
		for(_j = (_screen_width - _quote_width - 2) / 2 : _j >= 0: _j--) @print_char ' ';
		_k =  p_quote_data-->_i;
		if(_i == 1 or _last_index) {
			_k = "";
#IfV3;
			for(_j = -2 : _j < _quote_width: _j++) @print_char '-';
#EndIf;
		} else 
			_k =  p_quote_data-->_i;
#IfV5;
		style reverse;
#EndIf;
		@print_char ' ';
		print (string) _k;
#IfV5;
		@output_stream 3 quote_buffer;
		print (string) _k;
		@output_stream -3;
!		print quote_buffer-->0;
		for(_j = quote_buffer-->0: _j < _quote_width + 1 : _j++) @print_char ' ';
		style roman;
#EndIf;
		@new_line;
	}
	
!	print (string) p_line_1;
#IfV5;
	@read_char _i;
#IfNot;
	read dummy_buffer 0;
#EndIf;
	@split_window 0;
	@set_window 0;
];


[Initialise b i;
	location = Library;
!	PlayerTo(LargeBox);
!	print "Parrot fed = ", FlagIsSet(F_PARROT_FED),"^";
!	SetFlag(F_PARROT_FED);
!	print "Have set. Parrot fed = ", FlagIsSet(F_PARROT_FED),"^";
!	ClearFlag(F_PARROT_FED);
!	print "Have cleared. Parrot fed = ", FlagIsSet(F_PARROT_FED),"^";
!	print "Parrot fed != ", FlagIsClear(F_PARROT_FED),"^";

!	b = BlueBook.&pants;
!	for(i=0 : i<BlueBook.#pants / 2 : i++)
!		print "BlueBook pants(",i,") is ", b-->i, "^";
!	BlueBook.description();
!	print "BlueBook.party is ", BlueBook.party, "^";
!	BlueBook.party(5);
	print "^^And so the story begins...^^";
];
#Ifdef USEINFORM;
Include "Grammar";
#Endif;

