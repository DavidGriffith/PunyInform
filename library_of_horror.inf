!% -~S

! Library_of_horror.inf - a sample game which uses PunyInform

! Uncomment to add optional features to PunyLib
!Constant DEBUG;
!Constant CUSTOM_ABBREVIATIONS;
!Constant OPTIONAL_FULL_DIRECTIONS;
!Constant OPTIONAL_ALLOW_WRITTEN_NUMBERS;
!Constant OPTIONAL_EXTENDED_VERBSET;
!Constant OPTIONAL_FULL_SCORE;
!Constant OPTIONAL_GUESS_MISSING_NOUN;
Constant OPTIONAL_MANUAL_SCOPE;
Constant RUNTIME_ERRORS = 2; ! 0 = Minimal error checking, 1 = Numeric error codes, 2: Error messages

Constant Story      "The Library Of Horror";
Constant Headline   "^A PunyInform demo game^";

Include "globals.h";

[ DeathMessage;
	if(deadflag == 3)
		print "You have summoned demons set to destroy the world";
];

! Setup flags
Constant FLAG_COUNT = 1;
Constant F_TALKED_TO_MANAGER = 0;
Include "ext_flags.h";

! Setup cheap scenery
[SceneryReply;
	default:
		"Better just leave it alone and get on with the task at hand.";
];
Include "ext_cheap_scenery.h";

! Setup quote box
Constant QUOTE_V3_SCREEN_WIDTH 40;
Include "ext_quote_box.h";

Include "puny.h";

!===================== Classes, verbs etc for game

! -- testing scope grammar token
! See: https://www.inform-fiction.org/manual/html/s32.html 

[ TalkToSub;
	print_ret (The) noun, " doesn't seem interested.";
];

Verb 'talk'
	* 'to' creature -> TalkTo;

[ QueryTopic;
  switch (scope_stage) {
      1: rfalse;
      2: ScopeWithin(WhatIsTopics); rtrue;
      3: "You haven't the faintest.";
  }
];

[ QuerySub; noun.description();];

Verb 'what' * 'is'/'was' scope=QueryTopic -> Query;

Class MultiTopic
	with
		number 0,
		parse_name [ _w1 _w2 _i _sw1 _sw2 _len;
			_w1 = NextWordStopped();
			_w2 = NextWordStopped();
			_i = 0;
			_len = self.#topics / 2;
#IfTrue RUNTIME_ERRORS > RTE_MINIMUM;
#IfTrue RUNTIME_ERRORS == RTE_VERBOSE;
			if(_len % 3 > 0)
				"ERROR: multi_topic topics property of ", (the) self," has incorrect # of values!^";
#IfNot;
			if(_len % 3 > 0)
				"ERROR: multi_topic #1!^";
#EndIf;
			while(_i < _len) {
				_sw1 = self.&topics-->(_i+2);
#IfTrue RUNTIME_ERRORS == RTE_VERBOSE;
				if(~~(_sw1 ofclass String or Routine))
					"ERROR: Element ", _i+2, " in multi_topic topics property of ", (the) self," is not a string or routine!^",
						"Element: ", (name) _sw1, "^";
#IfNot;
				if(~~(_sw1 ofclass String or Routine))
					"ERROR: multi_topic #2!^";
#EndIf;

				_i = _i + 3;
			}
			_i = 0;
#endif;
			while(_i < _len) {
				_sw1 = self.&topics-->_i;
				_sw2 = self.&topics-->(_i+1);
				if(_w1 == _sw1 && _w2 == _sw2) {
					self.number = _i;
					return 2;
				}
				if(_w1 == _sw1 or _sw2) {
					self.number = _i;
					return 1;
				}
				_i = _i + 3;
			}
			! It would make sense to return 0 here, but property
			! routines return 0 by default anyway.
		],
		description [ _k;
			_k = self.&topics-->(self.number + 2);
			if(_k ofclass Routine) {
				_k();
				rtrue;
			}
			print_ret (string) _k;
		];

Object WhatIsTopics "WhatIsTopics";

MultiTopic -> MultiQuestion_1 "MultiQuestion_1"
	with
		topics
			1 'library' "A library is venue where books are kept and people can borrow said books."
			1 'grue' "A grue is a sinister creature lurking in the dark. If anyone has actually seen a grue,
				they have not lived long enough to tell the tale."
			'library' 'manager' "Library managers oversee the daily activities and functions of a library.";  

Array quote_1 --> 5 35
"When I die, I want to go peacefully"
"in my sleep like my grandfather."
"Not screaming in terror, like the" 
"passengers in his car."
"               -- Jack Handey";

Object Library "The Library"
	with
		description "You are in a library. The stairs leading down to the basement are to the east.",
		cheap_scenery
			1 'library' "It's a beautiful old library.",
		e_to TopOfStairs,
	has light;

Object -> Manager "library manager"
	with
		article "the",
		parse_name [ _w1;
			_w1 = NextWordStopped();
			if(_w1 == 'manager') return 1;
			if(_w1 == 'library' && NextWordStopped() == 'manager') return 2;
		],
		before [;
			TalkTo:
				if(FlagIsClear(F_TALKED_TO_MANAGER)) {
					SetFlag(F_TALKED_TO_MANAGER);
					"He looks up at you: ~Oh, there you are! Listen, I really need you to go get a book for me - Where the Wild Things Are by Maurice Sendak. I must have left it in the repair shop in the basement. Frank the Robot is down there. He'll help you find it.~";
				} else
					"~We're done talking.~";
		],
	has animate;

Object TopOfStairs "Staircase Leading Down"
	with
		description "The stairs descend into a foreboding darkness. The main hall of the library is off to the west.",
		w_to Library,
		d_to BottomOfStairs,
		after [;
			if(self hasnt general) {
				give self general;
				QuoteBox(quote_1);
			}
		],
	has light;
		
Object BottomOfStairs "Basement, Near Staircase"
	with
		description "It's nearly dark here, since the lamp in the ceiling is missing its light bulb.
			However, there's enough light coming in from the stairs and nearby rooms to make
			out your surroundings. There is more light to the east.",
		u_to TopOfStairs,
		e_to Hallway,
	has light;

! Data that Frank needs to print where he came from.	
#IfDef OPTION_FULL_DIRECTIONS;
Array opposite_directions table "south" "north" "west" "east" "southwest" "southeast" "northwest" "northeast" "down" "up" "out" "in";
#IfNot;
Array opposite_directions table "south" "north" "west" "east" "down" "up" "out" "in";
#EndIf;

Object -> Frank "Frank the Robot"
	with
		name 'frank' 'the' 'robot',
		when_off [; ! The first time the player spots Frank, he turns on automatically and his daemon is started.
			give self on;
			give self moved;
			StartDaemon(self);
			"Frank the Robot is standing here, all dark and quiet. As you enter the room, some LEDs light up and Frank's eyes start to glow with a feeble yellow light.";
		],
		before [;
			SwitchOff:
				"A bright light arc juts out from near the button and the electric shock makes you jump back.";
		],
		react_before [;
			Go:
				if(location == StorageRoom && selected_direction == e_to)
					"Frank rolls up in front of you, blocking your path. ~That part of the basement is not safe. There is nothing of interest there anyway.~";
		],
		daemon [ _my_loc _i _dir_prop _dir_count;
			! Frank wants to follow the player around, but can't go up/down/in/out
			_my_loc = parent(self);
			if(location ~= _my_loc){
				_dir_count = direction_properties_array-->0 - 4; ! Skip the last 4 directions (u_to, d_to, in_to, out_to)
				for(_i=1 : _i <= _dir_count : _i++) {
					_dir_prop = direction_properties_array-->_i;
					if(_my_loc provides _dir_prop && _my_loc._dir_prop == location) {
						move self to location;
						"^Frank enters from the ", (string) opposite_directions-->_i, ".";
					}
				}
			}
		],
		description "Frank has a rather dreary look.",
	has animate proper switchable;

Object Hallway "Hallway"
	with
		description "A wide hallway leads from the stairs to the west to another room to the south. There are some
			dusty doors along the walls, but they have all been nailed shut a long time ago.",
		cheap_scenery 'door' 'doors' "Regular doors, but old and worn, with some cobweb on them.",
		w_to BottomOfStairs,
		s_to StorageRoom,
	has light;
	
Object StorageRoom "Storage Room"
	with 
		description "A large storage room, which is now empty except for cobweb and dust. 
			Some light is coming from the north and west. A smaller, dark passage leads east. There's a
			yellow sign above the dark passage.",
		cheap_scenery 
			'dust' 'cobweb' "Doesn't look like this part of the basement is ever cleaned."
			'yellow' 'sign' "~Dangerous area! Keep out!~",		
		n_to Hallway,
		w_to RepairShop,
		e_to DarkChamber,
	has light;

Object RepairShop "Repair Shop"
	with
		description "This is a smaller room, with a workbench and various specialized tools. The whole room 
			is quite clean.",
		cheap_scenery 
			'bench' 'workbench' "It's an old and worn workbench."
			'specialized' 'tools' "The tools are for repairing books, you can tell that much.",
		e_to StorageRoom,
	has light;

Object DarkChamber "Dark chamber"
	with 
		description "As you enter, two candles on a table suddenly light up. The large table stands 
			in the middle of the otherwise empty room.",
		w_to StorageRoom,
	has light;

Object -> Table "table"
	with
		name 'large' 'table',
		description "It's a very sturds wooden table. Looks like oak to you.",
	has static scenery;
	
Object -> Book "red book"
	with
		name 'red' 'leather' 'book' 'books//p',
		describe [;
			if(self has open)
				"^The large red book lies open on the table.";
			else 
				"^A large red book lies on the table, closed.";
		],
		description [;
			print "The book is covered in red leather. ";
			if(self has open)
				"Some words are written across the page, in creepy letters.";
			else
				"Somehow, you get a feeling that the book is evil and dangerous.";
		],
		add_to_scope [;
			if(self has open)
				PlaceInScope(Words);
		],
	has openable transparent;

Object Words "words"
	with
		name 'creepy' 'letters' 'word' 'words',
		before [;
			Examine:
				deadflag = 3;
				"After a few seconds of struggling with the ancient letters, you can make out the
					words and read them out loud: ~KLAATU BARADA NIKTO~^^
					Several holes open in the floor and fiery beings rise from them. The earth trembles and the walls and ceiling fall over you.";
		];
		
[Initialise;
	location = Library;
	print "^^And so the story begins...^^";
];
