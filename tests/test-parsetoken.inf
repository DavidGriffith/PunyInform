#Iftrue (#version_number == 8);
Constant USEINFORM;
#Endif;

Constant Story      "Parser test";
Constant Headline   "^A parser test suite for PunyInform.^";
Serial "200827";


Constant INITIAL_LOCATION_VALUE = Library;

#Ifndef USEINFORM;
! Uncomment to show time instead of score/turns
!Statusline time;

Constant DEBUG;
!Constant DEBUG_PARSEANDPERFORM;
!Constant DEBUG_PARSEPATTERN;
!Constant DEBUG_PARSETOKEN;
!Constant DEBUG_CHECKNOUN;
!Constant DEBUG_GETNEXTNOUN;
!Constant DEBUG_SCOPE;

! Uncomment to add optional features to PunyLib
!Constant DEBUG;
!Constant CUSTOM_ABBREVIATIONS;
!Constant OPTIONAL_ALLOW_WRITTEN_NUMBERS;
Constant OPTIONAL_EXTENDED_METAVERBS;
Constant OPTIONAL_EXTENDED_VERBSET;
!Constant OPTIONAL_NO_DARKNESS;
!Constant OPTIONAL_FULL_SCORE;
!Constant OPTIONAL_FULL_DIRECTIONS;
!Constant OPTIONAL_GUESS_MISSING_NOUN;
!Constant OPTIONAL_MANUAL_SCOPE;
!Constant RUNTIME_ERRORS = 0;
#EndIf;

#Ifdef USEINFORM;
Include "Parser";
Include "VerbLib";
#IfNot;
Include "globals.h";
#EndIf;

[ParseNoun obj w;
    if(obj == apple) {
        w = NextWord();
        wn--;
        if(w == 'apricot') return 1;
    }
    return -1;
];

[BangParse;
#Ifdef USEINFORM;
    return ParseToken(ELEMENTARY_TT, NUMBER_TOKEN);
#Ifnot;
    return ParseToken(TT_OBJECT, NUMBER_OBJECT);
#Endif;
];

Verb 'bang'
    * BangParse -> Bang;

[BangSub;
    "Noun is ", parsed_number, ".";
];

[WowScope;
    switch(scope_stage) {
        1: rfalse;
        2: ScopeWithin(CarPark); rtrue;
        3: "You can't wow that, you crazy person!";
    }
];

[WowParse x;
#Ifdef USEINFORM;
    x = ParseToken(SCOPE_TT, WowScope);
#Ifnot;
    x = ParseToken(TT_SCOPE, WowScope);
#Endif;
    print "ParseToken returned ", x, "^";
    return x;
];

Verb 'wow'
    * WowParse -> Wow;

[WowSub;
    print (The) noun, " is in scope!^";

!   LoopOverScope(WowLoop);
];


#Ifndef USEINFORM;
Include "puny.h";
#EndIf;

! Uncomment to add PunyLib extensions
!Include "ext_menu.h";
!Include "ext_flags.h";
!Include "ext_quote_box.h";
!Include "ext_cheap_scenery.h";


#Ifdef USEINFORM;
Include "Grammar";
#Endif;

Object Library "The Library"
	with
	    description "You are in a library.",
	    s_to CarPark,
	has light;

Object -> John "John"
	with name 'john',
	life [;
	Answer:  print "answer words ", consult_words, " from ", consult_from, "^";
	Ask: print "ask^";
	],
	before [;
	Consult: print "consult^";
	],
	grammar [;
	    print "grammar^";
    ],
	has animate proper;

Object CarPark "Car Park"
	with
	    description "You are in a car park.",
	    n_to Library,
	has light;

Object -> apple "apple"
	with name 'apple',
	has edible;

Object -> egg "egg"
	with name 'egg',
	has edible;

[ Initialise;
#IfDef USEINFORM;
    location=INITIAL_LOCATION_VALUE;
#EndIf;
];

